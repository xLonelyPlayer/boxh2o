name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main

# Arquiteto GCP: Permissões essenciais para o WIF funcionar.
# O id-token: write permite que o workflow gere um OIDC token para a GCP.
permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Arquiteto GCP: Este é o passo mágico. Ele troca o token do GitHub por um token da GCP.
      - name: 'Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # O nome do provedor que criamos com Terraform
          workload_identity_provider: 'projects/${{ secrets.APP_BOXH2O_PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          # O email da conta de serviço que o GitHub irá personificar
          service_account: 'terraform@${{ secrets.APP_BOXH2O_CLIENT_ID }}.iam.gserviceaccount.com'

      # A partir daqui, todos os comandos gcloud/terraform estão autenticados
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' # Aplica apenas na branch main
        run: terraform apply -auto-approve